@model Presentation_UI_.ViewModels.ProjectCreateViewModel

@{
    ViewData["Title"] = "PROJEKT 101 - SKAPA NYTT";
}

<div class="container mt-5">
    <h2 class="mb-4">PROJEKT 101 - SKAPA NYTT</h2>

    <form method="post" asp-action="Save">
        <!-- 📌 SECTION 1: PROJEKTINFO -->
        <div class="border p-3 mb-4">
            <h4 class="mb-3">Projektinfo</h4>
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Projektnr</label>
                    <input type="text" class="form-control" asp-for="ProjectNumber" readonly>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Benämning</label>
                    <input type="text" class="form-control" asp-for="Description" required>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Startdatum</label>
                    <input type="date" class="form-control" asp-for="StartDate" required>
                    <span asp-validation-for="StartDate" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Slutdatum</label>
                    <input type="date" class="form-control" asp-for="EndDate">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select class="form-select" asp-for="Status">
                        <option value="Planerat">Planerat</option>
                        <option value="Pågår">Pågår</option>
                        <option value="Avslutat">Avslutat</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Projektledare</label>
                    @if (Model.ProjectLeaders != null && Model.ProjectLeaders.Any())
                    {
                        <select class="form-select" asp-for="ProjectLeaderID">
                            <option value="0">Välj en projektledare</option> <!-- ✅ Lägg tillbaka denna -->
                            @foreach (var leader in Model.ProjectLeaders)
                            {
                                @if(leader.ProjectLeaderID != -1)
                                {                           
                                <option value="@leader.ProjectLeaderID">@($"{leader.FirstName} {leader.LastName}")</option>
                                }
                            }
                        </select>

                    }
                    else
                    {
                        <p class="text-danger">Kontakta Admin - inga projektledare tillgängliga.</p>
                    }
                    <span asp-validation-for="ProjectLeaderID" class="text-danger"></span>
                </div>

            </div>
        </div>

        <!-- 📌 SECTION 2: BESTÄLLNING -->
        <div class="border p-3 mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="mb-3">Beställningar</h4>
                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                    Skapa ny beställning
                </button>
            </div>

            <ul class="list-group mt-3" id="orderList">
                @if (Model.Orders != null && Model.Orders.Any())
                {
                    @foreach (var order in Model.Orders)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@order.ServiceName</strong> - @order.Hours timmar x @order.Price kr/timme =
                                <strong>@(order.Hours * order.Price) kr</strong>
                                <br><small>Kund: @order.CustomerName</small>
                            </div>
                            <button type="button" class="btn btn-danger btn-sm remove-order">Ta bort</button>
                        </li>
                    }
                }
            </ul>

            <!-- 🔴 Felmeddelanden visas här om ingen beställning har lagts till -->
            @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ContainsKey("Orders"))
            {
                <div class="text-danger mt-2">
                    @Html.ValidationMessage("Orders")
                </div>
            }
        </div>


        <!-- Modal för ny beställning -->
        <div class="modal fade" id="createOrderModal" tabindex="-1" aria-labelledby="createOrderModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createOrderModalLabel">Skapa Ny Beställning</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Tjänst</label>
                            <select id="orderService" class="form-select">
                                @if (Model.Services != null && Model.Services.Any())
                                {
                                    <option selected disabled>Välj en tjänst</option>
                                    @foreach (var service in Model.Services)
                                    {
                                        <option value="@service.ServiceID">@service.ServiceName</option>
                                    }
                                }
                                else
                                {
                                    <option selected disabled>Kontakta Admin - inga tjänster tillgängliga</option>
                                }
                            </select>

                            <span class="text-danger d-none" id="orderServiceError">Välj en giltig tjänst.</span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Timmar</label>
                            <input type="number" id="orderHours" class="form-control">
                            <span class="text-danger d-none" id="orderHoursError">Timmar måste vara ett positivt tal.</span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Pris per timme</label>
                            <input type="number" id="orderPricePerHour" class="form-control">
                            <span class="text-danger d-none" id="orderPriceError">Pris måste vara ett positivt tal.</span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Kund</label>
                            <select id="orderCustomer" class="form-select">

                                @if (Model.Customers != null && Model.Customers.Any())
                                {
                                    <option selected disabled>Välj en kund</option>
                                    @foreach (var customer in Model.Customers)
                                    {
                                        <option value="@customer.CustomerID">@customer.CustomerName</option>
                                    }
                                }
                                else
                                {
                                    <option selected disabled>Kontakta Admin - inga kunder tillgängliga</option>
                                }
                            </select>

                            <span class="text-danger d-none" id="orderCustomerError">Välj en giltig kund.</span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Avbryt</button>
                        <button type="button" id="saveOrder" class="btn btn-primary">Spara Beställning</button>
                    </div>
                </div>
            </div>
        </div>



        <!-- 📌 SECTION 3: SAMMANSTÄLLNING -->
        <div class="border p-3">
            <h4 class="mb-3">Sammanställning</h4>
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Totala Timmar</label>
                    <input type="number" id="totalHours" class="form-control" asp-for="Summary.TotalHours">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Total Pris</label>
                    <input type="number" id="totalPrice" class="form-control" asp-for="Summary.TotalPrice">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Anteckningar</label>
                    <textarea class="form-control" asp-for="Summary.Notes"></textarea>
                </div>
            </div>
        </div>


        <div class="mt-4 d-flex justify-content-end gap-3">
            <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Avbryt</a>
            <button type="submit" class="btn btn-success">Spara</button>
        </div>
    </form>



</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const totalHoursField = document.getElementById("totalHours");
        const totalPriceField = document.getElementById("totalPrice");
        const orderList = document.getElementById("orderList");
        const form = document.querySelector("form");

        // Förhindra manuell inmatning i sammanställningsfälten
        const preventEdit = (event) => event.preventDefault();
        totalHoursField.addEventListener("keydown", preventEdit);
        totalHoursField.addEventListener("paste", preventEdit);
        totalHoursField.addEventListener("mousedown", preventEdit);
        totalPriceField.addEventListener("keydown", preventEdit);
        totalPriceField.addEventListener("paste", preventEdit);
        totalPriceField.addEventListener("mousedown", preventEdit);

        // Uppdatera sammanställningen
        const updateSummary = () => {
            let totalHours = 0;
            let totalPrice = 0;

            document.querySelectorAll("#orderList li").forEach(order => {
                const match = order.dataset.orderInfo.match(/(\d+\.\d{2}|\d+) timmar x (\d+\.\d{2}|\d+) kr\/timme = (\d+\.\d{2}|\d+) kr/);
                if (match) {
                    totalHours += parseFloat(match[1]);
                    totalPrice += parseFloat(match[3]);
                }
            });

            totalHoursField.value = totalHours.toFixed(2);
            totalPriceField.value = totalPrice.toFixed(2);
        };

        // Validera fälten
        const validateFields = () => {
            let isValid = true;
            const service = document.getElementById("orderService").value;
            const customer = document.getElementById("orderCustomer").value;
            const hours = parseFloat(document.getElementById("orderHours").value.trim());
            const pricePerHour = parseFloat(document.getElementById("orderPricePerHour").value.trim());

            document.getElementById("orderServiceError").classList.toggle("d-none", service !== "");
            document.getElementById("orderCustomerError").classList.toggle("d-none", customer !== "");
            document.getElementById("orderHoursError").classList.toggle("d-none", !isNaN(hours) && hours > 0);
            document.getElementById("orderPriceError").classList.toggle("d-none", !isNaN(pricePerHour) && pricePerHour > 0);

            isValid = service !== "" && customer !== "" && !isNaN(hours) && hours > 0 && !isNaN(pricePerHour) && pricePerHour > 0;
            return isValid;
        };

        // Hantera sparandet av en beställning
        document.getElementById("saveOrder").addEventListener("click", function () {
            if (!validateFields()) {
                return;
            }

            const serviceSelect = document.getElementById("orderService");
            const customerSelect = document.getElementById("orderCustomer");
            const serviceId = serviceSelect.value;
            const serviceName = serviceSelect.options[serviceSelect.selectedIndex].text;
            const customerId = customerSelect.value;
            const customerName = customerSelect.options[customerSelect.selectedIndex].text;
            const hours = parseFloat(document.getElementById("orderHours").value.trim());
            const pricePerHour = parseFloat(document.getElementById("orderPricePerHour").value.trim());
            const totalPrice = (hours * pricePerHour).toFixed(2);

            const listItem = document.createElement("li");
            listItem.className = "list-group-item d-flex justify-content-between align-items-center";
            listItem.dataset.orderInfo = `${hours} timmar x ${pricePerHour} kr/timme = ${totalPrice} kr`;
            listItem.innerHTML = `
                <div>
                    <strong>${serviceName}</strong> - ${hours} timmar x ${pricePerHour} kr/timme =
                    <strong>${totalPrice} kr</strong>
                    <br><small>Kund: ${customerName}</small>
                </div>
                <button type="button" class="btn btn-danger btn-sm remove-order">Ta bort</button>
            `;
            orderList.appendChild(listItem);

            // Lägg till dolda inputfält för att säkerställa att rätt data skickas i POST
            const index = orderList.children.length - 1;
            form.insertAdjacentHTML("beforeend", `
                <input type="hidden" name="Orders[${index}].CustomerID" value="${customerId}">
                <input type="hidden" name="Orders[${index}].CustomerName" value="${customerName}">
                <input type="hidden" name="Orders[${index}].ServiceID" value="${serviceId}">
                <input type="hidden" name="Orders[${index}].ServiceName" value="${serviceName}">
                <input type="hidden" name="Orders[${index}].Hours" value="${hours}">
                <input type="hidden" name="Orders[${index}].Price" value="${pricePerHour}">
            `);

            updateSummary();

            // Stäng modalen på ett säkert sätt
            try {
                const modal = bootstrap.Modal.getInstance(document.getElementById("createOrderModal"));
                if (modal) modal.hide();
            } catch (error) {
                console.error("Error closing modal:", error);
            }
        });

        // Hantera borttagning av beställningar
        orderList.addEventListener("click", function (e) {
            if (e.target.classList.contains("remove-order")) {
                e.target.closest("li").remove();
                updateSummary();
            }
        });
    });
    const validateForm = () => {
        let isValid = true;

        // Funktion för att hantera felmeddelanden och visuell markering
        const toggleError = (inputId, errorId, condition) => {
            document.getElementById(errorId).classList.toggle("d-none", !condition);
            document.getElementById(inputId).classList.toggle("is-invalid", condition);
        };

        // 📌 Validera projektinfo
        toggleError("Description", "DescriptionError", document.getElementById("Description").value.trim() === "");
        toggleError("StartDate", "StartDateError", document.getElementById("StartDate").value === "");
        toggleError("Status", "StatusError", document.getElementById("Status").value === "");
        toggleError("ProjectLeaderID", "ProjectLeaderError", document.getElementById("ProjectLeaderID").value === "0");

        // Kontrollera att minst en beställning finns
        const hasOrders = document.querySelectorAll("#orderList li").length > 0;
        document.getElementById("OrderError").classList.toggle("d-none", hasOrders);

        if (!hasOrders) isValid = false;

        return isValid;
    };

    // 📌 Anropa validering vid formulärinskickning
    document.querySelector("form").addEventListener("submit", function (event) {
        if (!validateForm()) {
            event.preventDefault();
        }
    });


</script>

