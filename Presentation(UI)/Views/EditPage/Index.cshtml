@model Presentation_UI_.ViewModels.ProjectCreateViewModel

@{
    ViewData["Title"] = "Redigera Projekt";
}

<div class="container mt-5">
    <h2 class="mb-4">Redigera Projekt</h2>

    <form method="post" asp-action="SaveEdit">
        <input type="hidden" asp-for="ProjectID" />

        <!-- 📌 SECTION 1: PROJEKTINFO -->
        <div class="border p-3 mb-4">
            <h4 class="mb-3">Projektinfo</h4>
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Projektnr</label>
                    <input type="text" class="form-control" asp-for="ProjectNumber" readonly>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Benämning</label>
                    <input type="text" class="form-control" asp-for="Description" required>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Startdatum</label>
                    <input type="date" class="form-control" asp-for="StartDate" required>
                    <span asp-validation-for="StartDate" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Slutdatum</label>
                    <input type="date" class="form-control" asp-for="EndDate">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select class="form-select" asp-for="Status" asp-items="@(new SelectList(new List<string> { "Planerat", "Pågår", "Avslutat" }, Model.Status))">
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Projektledare</label>
                    @if (Model.ProjectLeaders != null && Model.ProjectLeaders.Any())
                    {
                        <select class="form-select" asp-for="ProjectLeaderID">
                            @* Show "Användare borttagen" only if ProjectLeaderID is -1 *@
                            @if (Model.ProjectLeaderID == -1)
                            {
                                <option value="-1" selected>Användare borttagen</option>
                            }
  

                            @* Loop through the rest of the leaders and show only active ones *@
                            @foreach (var leader in Model.ProjectLeaders.Where(pl => pl.ProjectLeaderID != -1 && pl.IsDeleted != 1))
                            {
                                @if (leader.ProjectLeaderID == Model.ProjectLeaderID)
                                {
                                    <option value="@leader.ProjectLeaderID" selected>
                                        @($"{leader.FirstName} {leader.LastName}")
                                    </option>
                                }
                                else
                                {
                                    <option value="@leader.ProjectLeaderID">
                                        @($"{leader.FirstName} {leader.LastName}")
                                    </option>
                                }
                            }
                        </select>
                    }
                    else
                    {
                        <p class="text-danger">Kontakta Admin - inga projektledare tillgängliga.</p>
                    }
                    <span asp-validation-for="ProjectLeaderID" class="text-danger"></span>
                </div>





            </div>
        </div>

        <!-- 📌 SECTION 2: BESTÄLLNING -->
        <div class="border p-3 mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="mb-3">Beställningar</h4>
                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                    Skapa ny beställning
                </button>
            </div>

            <ul class="list-group mt-3" id="orderList">
                @if (Model.Orders != null && Model.Orders.Any())
                {
                    @for (int i = 0; i < Model.Orders.Count; i++)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center order-item"
                            data-order-id="@Model.Orders[i].ServiceID"
                            data-hours="@Model.Orders[i].Hours"
                            data-price="@Model.Orders[i].Price">

                            <div>
                                <strong>@Model.Orders[i].ServiceName</strong> - @Model.Orders[i].Hours timmar x @Model.Orders[i].Price kr/timme =
                                <strong>@(Model.Orders[i].Hours * Model.Orders[i].Price) kr</strong>
                                <br><small>Kund: @Model.Orders[i].CustomerName</small>
                            </div>

                            <button type="button" class="btn btn-danger btn-sm remove-order">Ta bort</button>

                            <!-- Dolda input-fält för att säkerställa att beställningen skickas till servern -->
                            <input type="hidden" name="Orders[@i].ServiceID" value="@Model.Orders[i].ServiceID" />
                            <input type="hidden" name="Orders[@i].CustomerID" value="@Model.Orders[i].CustomerID" />
                            <input type="hidden" name="Orders[@i].Hours" value="@Model.Orders[i].Hours" />
                            <input type="hidden" name="Orders[@i].Price" value="@Model.Orders[i].Price" />
                            <input type="hidden" name="Orders[@i].ServiceName" value="@Model.Orders[i].ServiceName" />
                            <input type="hidden" name="Orders[@i].CustomerName" value="@Model.Orders[i].CustomerName" />
                        </li>
                    }
                }
            </ul>



            <!-- 🔴 Felmeddelanden visas här om ingen beställning har lagts till -->
            @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ContainsKey("Orders"))
            {
                <div class="text-danger mt-2">
                    @Html.ValidationMessage("Orders")
                </div>
            }
        </div>

        <!-- Modal för ny beställning -->
        <div class="modal fade" id="createOrderModal" tabindex="-1" aria-labelledby="createOrderModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createOrderModalLabel">Skapa Ny Beställning</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Tjänst</label>
                            <select id="orderService" class="form-select">
                                @if (Model.Services != null && Model.Services.Any())
                                {
                                    <option selected disabled>Välj en tjänst</option>
                                    @foreach (var service in Model.Services)
                                    {
                                        <option value="@service.ServiceID">@service.ServiceName</option>
                                    }
                                }
                                else
                                {
                                    <option selected disabled>Kontakta Admin - inga tjänster tillgängliga</option>
                                }
                            </select>
                            <span class="text-danger d-none" id="orderServiceError">Välj en giltig tjänst.</span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Timmar</label>
                            <input type="number" id="orderHours" class="form-control">
                            <span class="text-danger d-none" id="orderHoursError">Timmar måste vara ett positivt tal.</span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Pris per timme</label>
                            <input type="number" id="orderPricePerHour" class="form-control">
                            <span class="text-danger d-none" id="orderPriceError">Pris måste vara ett positivt tal.</span>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Kund</label>
                            <select id="orderCustomer" class="form-select">
                                @if (Model.Customers != null && Model.Customers.Any())
                                {
                                    <option selected disabled>Välj en kund</option>
                                    @foreach (var customer in Model.Customers)
                                    {
                                        <option value="@customer.CustomerID">@customer.CustomerName</option>
                                    }
                                }
                                else
                                {
                                    <option selected disabled>Kontakta Admin - inga kunder tillgängliga</option>
                                }
                            </select>
                            <span class="text-danger d-none" id="orderCustomerError">Välj en giltig kund.</span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Avbryt</button>
                        <button type="button" id="saveOrder" class="btn btn-primary">Spara Beställning</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 📌 SECTION 3: SAMMANSTÄLLNING -->
        <div class="border p-3">
            <h4 class="mb-3">Sammanställning</h4>
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Totala Timmar</label>
                    <input type="number" id="totalHours" class="form-control" asp-for="Summary.TotalHours" readonly>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Total Pris</label>
                    <input type="number" id="totalPrice" class="form-control" asp-for="Summary.TotalPrice" readonly>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Anteckningar</label>
                    <textarea class="form-control" asp-for="Summary.Notes"></textarea>
                </div>
            </div>
        </div>

        <div class="mt-4 d-flex justify-content-end gap-3">
            <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Avbryt</a>
            <button type="submit" class="btn btn-success">Spara</button>
        </div>
    </form>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const totalHoursField = document.getElementById("totalHours");
        const totalPriceField = document.getElementById("totalPrice");
        const orderList = document.getElementById("orderList");
        const form = document.querySelector("form");
        updateSummary();
        // Hitta högsta order-id vid sidladdning
        let highestOrderId = 0;
        document.querySelectorAll("#orderList li[data-order-id]").forEach(item => {
            const orderId = parseInt(item.dataset.orderId);
            if (orderId > highestOrderId) {
                highestOrderId = orderId;
            }
        });

        /**
         * Förhindrar att totalHours och totalPrice kan redigeras manuellt.
         */
        const preventEdit = (event) => event.preventDefault();
        totalHoursField.addEventListener("keydown", preventEdit);
        totalHoursField.addEventListener("paste", preventEdit);
        totalHoursField.addEventListener("mousedown", preventEdit);
        totalPriceField.addEventListener("keydown", preventEdit);
        totalPriceField.addEventListener("paste", preventEdit);
        totalPriceField.addEventListener("mousedown", preventEdit);

        /**
         * Uppdaterar summeringen av beställningar.
         */
        function updateSummary() {
            let totalHours = 0;
            let totalPrice = 0;

            document.querySelectorAll("#orderList li").forEach(order => {
                const hours = parseFloat(order.querySelector('input[name*="Hours"]').value) || 0;
                const price = parseFloat(order.querySelector('input[name*="Price"]').value) || 0;
                totalHours += hours;
                totalPrice += hours * price;
            });

            totalHoursField.value = totalHours.toFixed(2);
            totalPriceField.value = totalPrice.toFixed(2);
        }


        /**
         * Skapar en ny beställning och tilldelar nästa ID
         */
        document.getElementById("saveOrder").addEventListener("click", function () {
            if (!validateFields()) {
                return;
            }

            highestOrderId++; // Öka högsta order-id med 1 för nästa order

            const serviceSelect = document.getElementById("orderService");
            const customerSelect = document.getElementById("orderCustomer");
            const hours = parseFloat(document.getElementById("orderHours").value.trim());
            const pricePerHour = parseFloat(document.getElementById("orderPricePerHour").value.trim());

            const order = {
                orderID: highestOrderId, // Använd det nya högsta ID:t
                serviceID: serviceSelect.value,
                serviceName: serviceSelect.options[serviceSelect.selectedIndex].text,
                customerID: customerSelect.value,
                customerName: customerSelect.options[customerSelect.selectedIndex].text,
                hours: hours,
                price: pricePerHour
            };
            updateSummary();

            addOrderToList(order);
    

        });

        /**
         * Lägger till en beställning i listan och synkar den med formuläret.
         */
        function addOrderToList(order) {
            const listItem = document.createElement("li");
            listItem.className = "list-group-item d-flex justify-content-between align-items-center order-item";
            listItem.dataset.orderId = order.orderID; // Sätter korrekt order-id
            listItem.dataset.hours = order.hours;
            listItem.dataset.price = order.price;

            listItem.innerHTML = `
                    <div>
                        <strong>${order.serviceName}</strong> - ${order.hours} timmar x ${order.price} kr/timme =
                        <strong>${(order.hours * order.price).toFixed(2)} kr</strong>
                        <br><small>Kund: ${order.customerName}</small>
                    </div>
                    <button type="button" class="btn btn-danger btn-sm remove-order">Ta bort</button>

                    <!-- Dolda input-fält för att skicka med beställningar -->
                    <input type="hidden" name="Orders[${order.orderID}].ServiceID" value="${order.serviceID}" />
                    <input type="hidden" name="Orders[${order.orderID}].CustomerID" value="${order.customerID}" />
                    <input type="hidden" name="Orders[${order.orderID}].Hours" value="${order.hours}" />
                    <input type="hidden" name="Orders[${order.orderID}].Price" value="${order.price}" />
                    <input type="hidden" name="Orders[${order.orderID}].ServiceName" value="${order.serviceName}" />
                    <input type="hidden" name="Orders[${order.orderID}].CustomerName" value="${order.customerName}" />
                `;

            orderList.appendChild(listItem);
            updateSummary();

            // Stäng modalen efter att en ny order har lagts till
            const modalElement = document.getElementById("createOrderModal");
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            if (modalInstance) {
                modalInstance.hide();
            }

        }

        /**
         * Tar bort en beställning från listan och synkar indexen.
         */
        orderList.addEventListener("click", function (e) {
            if (e.target.classList.contains("remove-order")) {
                e.target.closest("li").remove();
                updateOrderInputs();
                updateSummary();
            }
        });

        /**
         * Uppdaterar index och namn på de dolda input-fälten så att alla orders skickas i formuläret.
         */
        function updateOrderInputs() {
            document.querySelectorAll("#orderList .order-item").forEach((item, index) => {
                item.dataset.index = index;
                item.querySelectorAll("input").forEach(input => {
                    const name = input.name.replace(/\d+/, index);
                    input.name = name;
                });
            });
        }

        /**
         * Validerar inmatningsfälten i beställningsmodulen.
         */
        function validateFields() {
            let isValid = true;
            const service = document.getElementById("orderService").value;
            const customer = document.getElementById("orderCustomer").value;
            const hours = parseFloat(document.getElementById("orderHours").value.trim());
            const pricePerHour = parseFloat(document.getElementById("orderPricePerHour").value.trim());

            document.getElementById("orderServiceError").classList.toggle("d-none", service !== "");
            document.getElementById("orderCustomerError").classList.toggle("d-none", customer !== "");
            document.getElementById("orderHoursError").classList.toggle("d-none", !isNaN(hours) && hours > 0);
            document.getElementById("orderPriceError").classList.toggle("d-none", !isNaN(pricePerHour) && pricePerHour > 0);

            isValid = service !== "" && customer !== "" && !isNaN(hours) && hours > 0 && !isNaN(pricePerHour) && pricePerHour > 0;
            return isValid;
        }

        /**
         * Validerar hela formuläret innan det skickas till servern.
         */
        function validateForm() {
            let isValid = document.querySelectorAll("#orderList .order-item").length > 0;
            return isValid;
        }

        /**
         * Vid formulärinlämning - se till att alla beställningar är synkade.
         */
        form.addEventListener("submit", function (event) {
            updateOrderInputs();
            if (!validateForm()) {
                event.preventDefault();
                alert("Du måste lägga till minst en beställning.");
            }
        });

    });
</script>
